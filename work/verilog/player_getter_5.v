/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module player_getter_5 (
    input clk,
    input rst,
    input button_firstdigit,
    input button_seconddigit,
    input button_confirmation,
    input [2:0] round_number,
    output reg [3:0] first_digit,
    output reg [3:0] second_digit,
    output reg [7:0] out,
    output reg done
  );
  
  
  
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_1 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  wire [1-1:0] M_button_cond_out;
  reg [1-1:0] M_button_cond_in;
  button_conditioner_2 button_cond (
    .clk(clk),
    .in(M_button_cond_in),
    .out(M_button_cond_out)
  );
  wire [1-1:0] M_edge_detector2_out;
  reg [1-1:0] M_edge_detector2_in;
  edge_detector_1 edge_detector2 (
    .clk(clk),
    .in(M_edge_detector2_in),
    .out(M_edge_detector2_out)
  );
  wire [1-1:0] M_button_cond2_out;
  reg [1-1:0] M_button_cond2_in;
  button_conditioner_2 button_cond2 (
    .clk(clk),
    .in(M_button_cond2_in),
    .out(M_button_cond2_out)
  );
  wire [1-1:0] M_edge_detector3_out;
  reg [1-1:0] M_edge_detector3_in;
  edge_detector_1 edge_detector3 (
    .clk(clk),
    .in(M_edge_detector3_in),
    .out(M_edge_detector3_out)
  );
  wire [1-1:0] M_button_cond3_out;
  reg [1-1:0] M_button_cond3_in;
  button_conditioner_2 button_cond3 (
    .clk(clk),
    .in(M_button_cond3_in),
    .out(M_button_cond3_out)
  );
  reg [3:0] M_fdd_d, M_fdd_q = 1'h0;
  reg [3:0] M_sdd_d, M_sdd_q = 1'h0;
  reg [0:0] M_ddd_d, M_ddd_q = 1'h0;
  
  always @* begin
    M_sdd_d = M_sdd_q;
    M_ddd_d = M_ddd_q;
    M_fdd_d = M_fdd_q;
    
    first_digit = M_fdd_q;
    second_digit = M_sdd_q;
    done = M_ddd_q;
    out = 1'h0;
    M_button_cond_in = button_firstdigit;
    M_edge_detector_in = M_button_cond_out;
    M_button_cond2_in = button_seconddigit;
    M_edge_detector2_in = M_button_cond2_out;
    M_button_cond3_in = button_confirmation;
    M_edge_detector3_in = M_button_cond3_out;
    if (!M_edge_detector3_out) begin
      if (round_number == 1'h0) begin
        M_fdd_d = 1'h0;
        M_sdd_d = 1'h0;
        M_ddd_d = 1'h0;
      end
      if (round_number >= 1'h1) begin
        if (M_edge_detector_out) begin
          if (M_fdd_q == 4'h9) begin
            M_fdd_d = 1'h0;
          end else begin
            M_fdd_d = M_fdd_q + 1'h1;
          end
        end
        if (M_edge_detector2_out) begin
          if (M_sdd_q == 4'h9) begin
            M_sdd_d = 1'h0;
          end else begin
            M_sdd_d = M_sdd_q + 1'h1;
          end
        end
        out = M_fdd_q * 4'ha + M_sdd_q;
      end
    end else begin
      if (M_ddd_q > 1'h1) begin
        M_ddd_d = 1'h0;
      end
      M_ddd_d = M_ddd_q + 1'h1;
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_fdd_q <= 1'h0;
      M_sdd_q <= 1'h0;
      M_ddd_q <= 1'h0;
    end else begin
      M_fdd_q <= M_fdd_d;
      M_sdd_q <= M_sdd_d;
      M_ddd_q <= M_ddd_d;
    end
  end
  
endmodule
