/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    input button1,
    input button3,
    input button5,
    input button7,
    input button9,
    input button11,
    input button13
  );
  
  
  
  reg rst;
  
  reg [5:0] alufn;
  
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_1 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  wire [1-1:0] M_button_cond_out;
  reg [1-1:0] M_button_cond_in;
  button_conditioner_2 button_cond (
    .clk(clk),
    .in(M_button_cond_in),
    .out(M_button_cond_out)
  );
  reg [2:0] M_round_d, M_round_q = 1'h0;
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_3 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  
  localparam START_getstate = 2'd0;
  localparam PLAY_getstate = 2'd1;
  localparam COMPARE_getstate = 2'd2;
  
  reg [1:0] M_getstate_d, M_getstate_q = START_getstate;
  
  wire [4-1:0] M_player1_first_digit;
  wire [4-1:0] M_player1_second_digit;
  wire [8-1:0] M_player1_out;
  wire [1-1:0] M_player1_startgame;
  wire [1-1:0] M_player1_done;
  reg [1-1:0] M_player1_clk;
  reg [1-1:0] M_player1_rst;
  reg [1-1:0] M_player1_button_firstdigit;
  reg [1-1:0] M_player1_button_seconddigit;
  reg [1-1:0] M_player1_button_confirmation;
  reg [1-1:0] M_player1_button_start;
  reg [3-1:0] M_player1_round_number;
  player_setter_4 player1 (
    .clk(M_player1_clk),
    .rst(M_player1_rst),
    .button_firstdigit(M_player1_button_firstdigit),
    .button_seconddigit(M_player1_button_seconddigit),
    .button_confirmation(M_player1_button_confirmation),
    .button_start(M_player1_button_start),
    .round_number(M_player1_round_number),
    .first_digit(M_player1_first_digit),
    .second_digit(M_player1_second_digit),
    .out(M_player1_out),
    .startgame(M_player1_startgame),
    .done(M_player1_done)
  );
  
  wire [4-1:0] M_player2_first_digit;
  wire [4-1:0] M_player2_second_digit;
  wire [8-1:0] M_player2_out;
  wire [1-1:0] M_player2_done;
  reg [1-1:0] M_player2_clk;
  reg [1-1:0] M_player2_rst;
  reg [1-1:0] M_player2_button_firstdigit;
  reg [1-1:0] M_player2_button_seconddigit;
  reg [1-1:0] M_player2_button_confirmation;
  reg [3-1:0] M_player2_round_number;
  player_getter_5 player2 (
    .clk(M_player2_clk),
    .rst(M_player2_rst),
    .button_firstdigit(M_player2_button_firstdigit),
    .button_seconddigit(M_player2_button_seconddigit),
    .button_confirmation(M_player2_button_confirmation),
    .round_number(M_player2_round_number),
    .first_digit(M_player2_first_digit),
    .second_digit(M_player2_second_digit),
    .out(M_player2_out),
    .done(M_player2_done)
  );
  
  always @* begin
    M_getstate_d = M_getstate_q;
    M_round_d = M_round_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_player1_rst = rst;
    M_player1_clk = clk;
    M_player2_rst = rst;
    M_player2_clk = clk;
    M_player1_button_firstdigit = button1;
    M_player1_button_seconddigit = button3;
    M_player1_button_confirmation = button5;
    M_player1_round_number = M_round_q;
    M_player1_button_start = button13;
    io_led[8+7-:8] = M_player1_out;
    M_player2_button_firstdigit = button7;
    M_player2_button_seconddigit = button9;
    M_player2_button_confirmation = button11;
    M_player2_round_number = M_round_q;
    io_led[16+7-:8] = M_player2_out;
    io_led[0+7-:8] = M_round_q;
    M_button_cond_in = M_player2_done;
    M_edge_detector_in = M_button_cond_out;
    
    case (M_getstate_q)
      START_getstate: begin
        led[0+0-:1] = 1'h1;
        led[7+0-:1] = 1'h1;
        led[6+0-:1] = 1'h1;
        led[5+0-:1] = 1'h1;
        led[4+0-:1] = 1'h1;
        led[3+0-:1] = 1'h1;
        led[2+0-:1] = 1'h1;
        led[1+0-:1] = 1'h1;
        M_round_d = 1'h0;
        if (M_player1_startgame) begin
          M_round_d = M_round_q + 1'h1;
          M_getstate_d = PLAY_getstate;
        end
      end
      PLAY_getstate: begin
        led[7+0-:1] = M_player1_done;
        led[2+0-:1] = M_player1_done;
        led[0+0-:1] = M_player2_done;
        if (M_player1_done) begin
          
        end
        if (M_player1_startgame) begin
          led = 8'h00;
          io_led = 24'h000000;
          M_getstate_d = START_getstate;
        end
        if (M_edge_detector_out) begin
          if (M_round_q == 3'h7) begin
            M_getstate_d = START_getstate;
          end else begin
            M_round_d = M_round_q + 1'h1;
          end
        end
        if (M_player1_done & M_player2_done) begin
          if (M_player1_out == M_player2_out) begin
            led = 8'h00;
            io_led = 24'h000000;
            M_getstate_d = START_getstate;
          end
          if (M_player1_out > M_player2_out) begin
            led[3+0-:1] = 1'h0;
            led[1+0-:1] = 1'h1;
            led[5+0-:1] = 1'h0;
          end
          if (M_player1_out < M_player2_out) begin
            led[3+0-:1] = 1'h0;
            led[1+0-:1] = 1'h0;
            led[5+0-:1] = 1'h1;
          end
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_round_q <= 1'h0;
    end else begin
      M_round_q <= M_round_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_getstate_q <= 1'h0;
    end else begin
      M_getstate_q <= M_getstate_d;
    end
  end
  
endmodule
